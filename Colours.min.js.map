{
  "version": 3,
  "sources": ["Colours.ts"],
  "sourcesContent": ["/**\n * Colour class with accurate color space conversions (CIELAB D65) and Delta E 2000\n * Supports HEX (3, 4, 6, 8 digits), RGB, XYZ, and LAB conversions.\n * @author Ahmed Moussa <moussa.ahmed95@gmail.com>\n * @version 3.0\n */\nclass Colour {\n\t// D65 reference values for 2\u00B0 observer (CIELAB)\n\tprivate static readonly REF_X: number = 95.047;\n\tprivate static readonly REF_Y: number = 100.0;\n\tprivate static readonly REF_Z: number = 108.883;\n\n\t/**\n\t * Convert HEX to LAB color space\n\t * @param hex - Supported formats: #RGB, #RGBA, #RRGGBB, #RRGGBBAA\n\t * @returns [L, a, b] tuple\n\t */\n\tpublic static hex2lab(hex: string): [number, number, number] {\n\t\tconst [r, g, b] = Colour.hex2rgba(hex);\n\t\treturn Colour.rgba2lab(r, g, b, 1);\n\t}\n\n\t/**\n\t * Convert RGBA to LAB color space\n\t * @returns [L, a, b] tuple\n\t */\n\tpublic static rgba2lab(r: number, g: number, b: number, a: number): [number, number, number] {\n\t\tconst [x, y, z] = Colour.rgb2xyz(r, g, b);\n\t\treturn Colour.xyz2lab(x, y, z);\n\t}\n\n\t/**\n\t * Convert LAB to RGBA color space\n\t * @returns [R, G, B, A] tuple (A always 1)\n\t */\n\tpublic static lab2rgba(l: number, a: number, b: number): [number, number, number, number] {\n\t\tconst [x, y, z] = Colour.lab2xyz(l, a, b);\n\t\treturn [...Colour.xyz2rgba(x, y, z), 1];\n\t}\n\n\t/**\n\t * Convert HEX to RGBA color space\n\t * @param hex - Supported formats: #RGB, #RGBA, #RRGGBB, #RRGGBBAA\n\t * @returns [R, G, B, A] tuple (A defaults to 1)\n\t */\n\tpublic static hex2rgba(hex: string): [number, number, number, number] {\n\t\tconst normalized = hex.replace(/^#/, \"\").toUpperCase();\n\t\tconst validChars = /^[0-9A-F]+$/i.test(normalized);\n\n\t\tif (!validChars || ![3, 4, 6, 8].includes(normalized.length)) {\n\t\t\tthrow new Error(`Invalid HEX format: ${hex}`);\n\t\t}\n\n\t\tlet expanded = normalized;\n\t\tif ([3, 4].includes(normalized.length)) {\n\t\t\texpanded = normalized.split(\"\").map((c) => c + c).join(\"\");\n\t\t}\n\n\t\tconst parsed = parseInt(expanded, 16);\n\t\tlet r, g, b, a = 1;\n\n\t\tif (expanded.length === 8) {\n\t\t\ta = ((parsed & 0xFF) / 255);\n\t\t\tr = (parsed >> 16) & 0xFF;\n\t\t\tg = (parsed >> 8) & 0xFF;\n\t\t\tb = parsed & 0xFF;\n\t\t} else {\n\t\t\tr = (parsed >> 16) & 0xFF;\n\t\t\tg = (parsed >> 8) & 0xFF;\n\t\t\tb = parsed & 0xFF;\n\t\t}\n\n\t\treturn [\n\t\t\tMath.min(255, Math.max(0, r)),\n\t\t\tMath.min(255, Math.max(0, g)),\n\t\t\tMath.min(255, Math.max(0, b)),\n\t\t\tMath.min(1, Math.max(0, a))\n\t\t];\n\t}\n\n\t/**\n\t * Convert RGB to XYZ color space\n\t */\n\tpublic static rgb2xyz(r: number, g: number, b: number): [number, number, number] {\n\t\tconst linearize = (c: number) =>\n\t\t\tc > 0.04045 ? Math.pow((c + 0.055) / 1.055, 2.4) : c / 12.92;\n\n\t\tconst [lr, lg, lb] = [r / 255, g / 255, b / 255]\n\t\t\t.map((c) => linearize(c) * 100);\n\n\t\treturn [\n\t\t\tlr * 0.4124564 + lg * 0.3575761 + lb * 0.1804375,\n\t\t\tlr * 0.2126729 + lg * 0.7151522 + lb * 0.0721750,\n\t\t\tlr * 0.0193339 + lg * 0.1191920 + lb * 0.9503041\n\t\t];\n\t}\n\n\t/**\n\t * Convert XYZ to RGBA color space\n\t */\n\tpublic static xyz2rgba(x: number, y: number, z: number): [number, number, number] {\n\t\tconst normalize = (c: number) => {\n\t\t\tc = c > 0.0031308 ? 1.055 * Math.pow(c, 1/2.4) - 0.055 : 12.92 * c;\n\t\t\treturn Math.round(Math.min(255, Math.max(0, c * 255)));\n\t\t};\n\n\t\tconst xyz = [x / 100, y / 100, z / 100];\n\t\tconst r = xyz[0] *  3.2404542 + xyz[1] * -1.5371385 + xyz[2] * -0.4985314;\n\t\tconst g = xyz[0] * -0.9692660 + xyz[1] *  1.8760108 + xyz[2] *  0.0415560;\n\t\tconst b = xyz[0] *  0.0556434 + xyz[1] * -0.2040259 + xyz[2] *  1.0572252;\n\n\t\treturn [normalize(r), normalize(g), normalize(b)];\n\t}\n\n\t/**\n\t * Convert XYZ to LAB color space\n\t */\n\tpublic static xyz2lab(x: number, y: number, z: number): [number, number, number] {\n\t\tconst f = (t: number) =>\n\t\t\tt > 0.008856 ? Math.pow(t, 1/3) : (7.787 * t) + (16 / 116);\n\n\t\tconst fx = f(x / Colour.REF_X);\n\t\tconst fy = f(y / Colour.REF_Y);\n\t\tconst fz = f(z / Colour.REF_Z);\n\n\t\treturn [\n\t\t\t116 * fy - 16,\n\t\t\t500 * (fx - fy),\n\t\t\t200 * (fy - fz)\n\t\t];\n\t}\n\n\t/**\n\t * Convert LAB to XYZ color space\n\t */\n\tpublic static lab2xyz(l: number, a: number, b: number): [number, number, number] {\n\t\tconst y = (l + 16) / 116;\n\t\tconst x = a / 500 + y;\n\t\tconst z = y - b / 200;\n\n\t\tconst inverseF = (t: number) =>\n\t\t\tt > 0.2068966 ? Math.pow(t, 3) : (t - 16/116) / 7.787;\n\n\t\treturn [\n\t\t\tinverseF(x) * Colour.REF_X,\n\t\t\tinverseF(y) * Colour.REF_Y,\n\t\t\tinverseF(z) * Colour.REF_Z\n\t\t];\n\t}\n\n\t/**\n\t * Calculate Delta E 2000 color difference\n\t */\n\tpublic static deltaE00(lab1: [number, number, number], lab2: [number, number, number]): number {\n\t\tconst [L1, a1, b1] = lab1;\n\t\tconst [L2, a2, b2] = lab2;\n\n\t\t// Helper functions\n\t\tconst rad2deg = (rad: number) => (rad * 180) / Math.PI;\n\t\tconst deg2rad = (deg: number) => (deg * Math.PI) / 180;\n\n\t\t// Weighting factors\n\t\tconst kL = 1, kC = 1, kH = 1;\n\n\t\t// Step 1: Calculate CIELAB values\n\t\tconst C1 = Math.sqrt(a1 ** 2 + b1 ** 2);\n\t\tconst C2 = Math.sqrt(a2 ** 2 + b2 ** 2);\n\t\tconst avgC = (C1 + C2) / 2;\n\t\tconst G = 0.5 * (1 - Math.sqrt(avgC ** 7 / (avgC ** 7 + 25 ** 7)));\n\n\t\t// Step 2: Calculate a', C', h'\n\t\tconst a1p = a1 * (1 + G);\n\t\tconst a2p = a2 * (1 + G);\n\t\tconst C1p = Math.sqrt(a1p ** 2 + b1 ** 2);\n\t\tconst C2p = Math.sqrt(a2p ** 2 + b2 ** 2);\n\n\t\tconst h1p = (b1 === 0 && a1p === 0) ? 0 : rad2deg(Math.atan2(b1, a1p)) % 360;\n\t\tconst h2p = (b2 === 0 && a2p === 0) ? 0 : rad2deg(Math.atan2(b2, a2p)) % 360;\n\n\t\t// Step 3: Calculate \u0394L', \u0394C', \u0394H'\n\t\tconst Lp = L2 - L1;\n\t\tconst Cp = C2p - C1p;\n\t\tlet hp = 0;\n\n\t\tif (C1p * C2p !== 0) {\n\t\t\thp = h2p - h1p;\n\t\t\tif (hp > 180) {\n\t\t\t\thp -= 360;\n\t\t\t} else if (hp < -180) {\n\t\t\t\thp += 360;\n\t\t\t}\n\t\t}\n\n\t\tconst Hp = 2 * Math.sqrt(C1p * C2p) * Math.sin(deg2rad(hp) / 2);\n\n\t\t// Step 4: Calculate weighting functions\n\t\tconst avgLp = (L1 + L2) / 2;\n\t\tconst avgCp = (C1p + C2p) / 2;\n\n\t\tlet avghp = (h1p + h2p) / 2;\n\t\tif (Math.abs(h1p - h2p) > 180) {\n\t\t\tavghp += 180;\n\t\t}\n\n\t\tconst T = 1 - 0.17 * Math.cos(deg2rad(avghp - 30))\n\t\t\t+ 0.24 * Math.cos(deg2rad(2 * avghp))\n\t\t\t+ 0.32 * Math.cos(deg2rad(3 * avghp + 6))\n\t\t\t- 0.2 * Math.cos(deg2rad(4 * avghp - 63));\n\n\t\tconst SL = 1 + (0.015 * (avgLp - 50) ** 2) / Math.sqrt(20 + (avgLp - 50) ** 2);\n\t\tconst SC = 1 + 0.045 * avgCp;\n\t\tconst SH = 1 + 0.015 * avgCp * T;\n\n\t\t// Step 5: Calculate rotation term\n\t\tconst \u03B8 = 30 * Math.exp(((-((avghp - 275) / 25)) ** 2));\n\t\tconst RC = 2 * Math.sqrt(avgCp ** 7 / (avgCp ** 7 + 25 ** 7));\n\t\tconst RT = -RC * Math.sin(deg2rad(2 * \u03B8));\n\n\t\t// Final calculation\n\t\treturn Math.sqrt(\n\t\t\t(Lp / (kL * SL)) ** 2 +\n\t\t\t(Cp / (kC * SC)) ** 2 +\n\t\t\t(Hp / (kH * SH)) ** 2 +\n\t\t\tRT * (Cp / (kC * SC)) * (Hp / (kH * SH))\n\t\t);\n\t}\n\n\t/**\n\t * Adjust color lightness while preserving original alpha\n\t */\n\tpublic static adjustLightness(\n\t\tr: number,\n\t\tg: number,\n\t\tb: number,\n\t\ta: number,\n\t\tfactor: number\n\t): [number, number, number, number] {\n\t\tconst [l, labA, labB] = Colour.rgba2lab(r, g, b, a);\n\t\tconst adjusted = Math.min(100, Math.max(0, l + l * factor));\n\t\treturn [...Colour.lab2rgba(adjusted, labA, labB)];\n\t}\n}\n"],
  "mappings": "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",
  "names": ["__name", "hex", "r", "g", "b", "x", "y", "z", "l", "a", "normalized", "expanded", "c", "parsed", "linearize", "lr", "lg", "lb", "normalize", "xyz", "f", "t", "fx", "fy", "fz", "inverseF", "lab1", "lab2", "L1", "a1", "b1", "L2", "a2", "b2", "rad2deg", "rad", "deg2rad", "deg", "kL", "kC", "kH", "C1", "C2", "avgC", "G", "a1p", "a2p", "C1p", "C2p", "h1p", "h2p", "Lp", "Cp", "hp", "Hp", "avgLp", "avgCp", "avghp", "T", "SL", "SC", "SH", "\u03B8", "RT", "factor", "labA", "labB", "adjusted"]
}
